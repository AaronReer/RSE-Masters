# Invitation to the RSE Community-Master Development

We invite all members of the **Research Software Engineering (RSE)** community and interested scientists and educators to join us in developing a Master's curriculum tailored to the unique needs, interests, and challenges of RSE.
Each module represents a specific area of the RSE landscape and will be shaped by community-driven short online workshops (2–3 hours each).

The main idea is to _supplement_ general courses on software engineering, data science and advanced science classes with RSE-specific courses tailored to the growing field of software engineering in research. Mapping necessary required basic courses is part the process.

These example modules will be new in structure and content and provide universities a suggestion how to hire and support the growing need for RSE competencies. These courses will be optional in the sense that alternatives or similar
existing classes will be suggested if a specialized lecturer is not available.

In these workshops, we collaboratively define:

- Relevant competences
- Suggested course structures
- RSE-specific perspectives

These efforts will feed directly into the development of a comprehensive and inclusive RSE Master's curriculum.
You can explore the broader project here: [RSE Masters Curriculum GitHub Repository](https://github.com/the-teachingRSE-project/RSE-Masters/tree/tschira-funding)

Below you can find a snapshot of ideas for the modules as talking points! The focus and depth of the courses is open for discussion! We start with this partitioning of the topics after a short discussion in the deRSE community. Different groupings of the topics are possible at a later stage. Lets' get going!


## 1. RSE Management and Communication

This module encapsulates the communication and management skills that are relevant for working in the interdisciplinary setting of RSE-professionals.

This includes but is not limited to:

- working in a team (see TEAM in [@competencies-F1000])
- teaching RSE-basics (see TEACH in [@competencies-F1000])
- project management (see PM in [@competencies-F1000])
- interaction with users and other stakeholders (see USERS in [@competencies-F1000])
- (suggestion Jael) FAIR for humans and machines
- (suggestion Jael) Software Management Plans for reserach software




## 2. The Missing Semester / Tooling / Utility

Peer-Learning/Forschendes Lernen/Student Teaching

In reference to the [MIT Missing Semester](https://missing.csail.mit.edu/) this module tries to convey the nuts and bolts of code development.

This includes (but is not limited to):

- Shell Tools and Scripting
- Editors & IDE (i.e. Vim)
- Data Wrangling
- Command-line Environment
- Version Control (Git)
- Debugging and Profiling
- Metaprogramming
- Documentation
- Security and Cryptography (ssh, md5)

These general competencies can be extended to RSE-specific techniques such as:

- Software publication and citation (see SP in [@competencies-F1000])
- Using domain repositories/directories (see DOMREP in [@competencies-F1000])

## 3. RSE Efficient Computing and Hardware

RSEs with expertise in HPC and other performance-critical computing domains specialize in optimizing code for efficient execution across various platforms, including clusters, cloud, edge, and embedded systems. They understand parallel programming models, hardware-specific optimizations, profiling tools, and platform constraints such as memory, energy, and latency. Their skills enable them to adapt software to diverse infrastructures, manage complex dependencies, and support researchers in accessing and using advanced computing resources effectively and sustainably.

Depending on the goals of the workshop, it may be useful to focus on participants with a background in technical computer science or some prior exposure to parallel programming. Familiarity with teaching multithreading, MPI, or GPU programming (e.g., CUDA) could be helpful, especially if we dive into hands-on HPC RSE aspects.


## 4. RSE Programming and Software Engineering

### RSE Programming

The RSE programming module extends the Fundamentals of Computer Science module with a focus on RSE-specific programming patterns,
necessary technologies and good practices.

This includes, but is not limited to

- software re-use (see SRU in [@competencies-F1000])
- creating documented code building blocks (see DOCBB in [@competencies-F1000])
- building distributable software (see DIST in [@competencies-F1000])
- research specific programming languages
- research specific code requirements (scalability, functional programming, ...)
- Vector and graph database in generative AI applications //This topic (LLM or AI) has been not yet deeply explored in RSE field. Perhaps someone here is an AI expert who can suggest more specific programmes?

### RSE-Software Engineering

This module extends the Classical Software Engineering Module with research specific learnings. This includes but is not limited to

- Adapting the software life cycle to research (see SWLC in [@competencies-F1000])
- Software behaviour awareness and analysis (see MOD in [@competencies-F1000])
- Research specific Engineering Patterns


## 5. RSE Theory

The RSE master program is more than a computer science specialisation for researchers. People working as RSE are often involved
in digitalization projects, institutional development or other non-technical tasks.

For a university level study program it is fitting that students learn an abstract high-level understanding of their
field so that they can adapt technical models, communication frameworks and policy recommendations to the complex cases.
For this they need a solid understanding in some of the more theoretical fields such as ...

- philosophy of science
- sociology of technology
- ethics and artificial intelligence
- human computer interaction
- digital humanities

This module conveys competences in areas such as but not limited to ...

- conducting and leading research (NEW)
- understanding the research cycle (RC)
- interaction with users and stakeholders (USERS)




## 6. Master's Thesis Module: Research Software Engineering Thesis

The master's thesis is the culminating component of the RSE programme. In this module, students apply the full spectrum of Research Software Engineering skills in a real-world research setting, demonstrating their ability to independently design, implement, and document a computational research contribution.

The thesis must address a research question in collaboration with a scientific or applied domain, but its core should include a substantial computational component. This may involve software development, data-intensive research, reproducibility infrastructure, or performance engineering — depending on the chosen topic and specialization.

Each thesis must be supervised jointly by:

- A domain expert (e.g., in physics, life sciences, or humanities)
- An RSE mentor (who ensures the quality and relevance of the computational contribution)

Students are expected to follow best practices in software engineering, version control, testing, and documentation. The final submission must include:

- A written thesis describing both the scientific and software contributions
- A structured, reproducible code repository
- A presentation and defense in a thesis colloquium

The colloquium serves as both a public communication exercise and a final evaluation, where students present their project and reflect on challenges and insights gained during the thesis.


# Join Us!

To get involved, please reach out via the repository or contact the organizing team directly at julian.dehne@gi.de.


# References

::: {#refs}
:::




